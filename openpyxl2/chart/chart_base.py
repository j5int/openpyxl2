#Autogenerated schema
from openpyxl2.descriptors import (
    Strict,
    Integer,
    Float,
    Set,
    Bool,
    String,
    MinMax,
    Alias,
)


class Extension(Strict):

    uri = String()

    def __init__(self,
                 uri=None,
                ):
        self.uri = uri

class ExtensionList(Strict):

    ext = Extension(allow_none=True)

    def __init__(self,
                 ext=None,
                ):
        self.ext = ext


class StrVal(Strict):

    idx = Integer(allow_none=True)
    v = String(allow_none=True)

    def __init__(self,
                 idx=None,
                 v=None,
                ):
        self.idx = idx


class StrData(Strict):

    ptCount = Integer(allow_none=True)
    pt = StrVal()
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 ptCount=None,
                 pt=None,
                 extLst=None,
                ):
        self.ptCount = ptCount
        self.pt = pt
        self.extLst = extLst


class StrRef(Strict):

    f = String()
    strCache = StrData()
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 f=None,
                 strCache=None,
                 extLst=None,
                ):
        self.f = f
        self.strCache = strCache
        self.extLst = extLst


class Tx(Strict):
    """
    Can be either ref or value
    """

    strRef = StrRef(allow_none=True)
    v = String(allow_none=True)

    def __init__(self, strRef, v):
        self.strRef = strRef
        self.v = v


# see also "EG_SerShared" for base properties
class SharedSer(Strict):

    """common to all series"""

    idx = Integer()
    order = Integer()
    tx = Tx()
    spPr = ShapeProperties()

    def __init__(self, idx, order, tx, spPr):
        self.idx = idx
        self.order = order
        self.tx = tx
        self.spPr = ShapeProperties()


class LineSer(Strict):

    marker = Marker(allow_none=True) # None is automatic which has markers
    dPt = DPt(allow_none=True)
    dLbls = DLbls(allow_none=True) # labels
    trendline = Trendline(allow_none=True)
    errBars = ErrBars(allow_none=True)
    cat = AxDataSource(allow_none=True) # ref/values for axis
    val = NumDataSource(allow_none=True) # ref/values for plot
    smooth = Boolean(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 marker=None,
                 dPt=None,
                 dLbls=None,
                 trendline=None,
                 errBars=None,
                 cat=None,
                 val=None,
                 smooth=None,
                 extLst=None,
                ):
        self.marker = marker
        self.dPt = dPt
        self.dLbls = dLbls
        self.trendline = trendline
        self.errBars = errBars
        self.cat = cat
        self.val = val
        self.smooth = smooth
        self.extLst = extLst


class Marker(Strict):

    symbol = MarkerStyle(allow_none=True)
    size = MarkerSize(allow_none=True)
    spPr = ShapeProperties(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 symbol=None,
                 size=None,
                 spPr=None,
                 extLst=None,
                ):
        self.symbol = symbol
        self.size = size
        self.spPr = spPr
        self.extLst = extLst


class MarkerStyle(Strict):

    val = Set(values=(['circle', 'dash', 'diamond', 'dot', 'none', 'picture', 'plus', 'square', 'star', 'triangle', 'x', 'auto']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class MarkerSize(Strict):

    val = MinMax()

    def __init__(self,
                 val=None,
                ):
        self.val = val


class ShapeProperties(Strict):

    bwMode = Set(values=(['clr', 'auto', 'gray', 'ltGray', 'invGray', 'grayWhite', 'blackGray', 'blackWhite', 'black', 'white', 'hidden']))
    xfrm = Transform2D(allow_none=True)
    ln = LineProperties(allow_none=True)
    scene3d = Scene3D(allow_none=True)
    sp3d = Shape3D(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 bwMode=None,
                 xfrm=None,
                 ln=None,
                 scene3d=None,
                 sp3d=None,
                 extLst=None,
                ):
        self.bwMode = bwMode
        self.xfrm = xfrm
        self.ln = ln
        self.scene3d = scene3d
        self.sp3d = sp3d
        self.extLst = extLst


class Transform2D(Strict):

    rot = Integer()
    flipH = Bool(allow_none=True)
    flipV = Bool(allow_none=True)
    off = Point2D(allow_none=True)
    ext = PositiveSize2D(allow_none=True)

    def __init__(self,
                 rot=None,
                 flipH=None,
                 flipV=None,
                 off=None,
                 ext=None,
                ):
        self.rot = rot
        self.flipH = flipH
        self.flipV = flipV
        self.off = off
        self.ext = ext


class Point2D(Strict):

    x = String()
    y = String()

    def __init__(self,
                 x=None,
                 y=None,
                ):
        self.x = x
        self.y = y


class PositiveSize2D(Strict):

    cx = Integer()
    cy = Integer()

    def __init__(self,
                 cx=None,
                 cy=None,
                ):
        self.cx = cx
        self.cy = cy


class LineProperties(Strict):

    w = ST_Coordinate32Unqualified()
    cap = Set(values=(['rnd', 'sq', 'flat']))
    cmpd = Set(values=(['sng', 'dbl', 'thickThin', 'thinThick', 'tri']))
    algn = Set(values=(['ctr', 'in']))
    headEnd = LineEndProperties(allow_none=True)
    tailEnd = LineEndProperties(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 w=None,
                 cap=None,
                 cmpd=None,
                 algn=None,
                 headEnd=None,
                 tailEnd=None,
                 extLst=None,
                ):
        self.w = w
        self.cap = cap
        self.cmpd = cmpd
        self.algn = algn
        self.headEnd = headEnd
        self.tailEnd = tailEnd
        self.extLst = extLst


class LineEndProperties(Strict):

    type = Set(values=(['none', 'triangle', 'stealth', 'diamond', 'oval', 'arrow']))
    w = Set(values=(['sm', 'med', 'lg']))
    len = Set(values=(['sm', 'med', 'lg']))

    def __init__(self,
                 type=None,
                 w=None,
                 len=None,
                ):
        self.type = type
        self.w = w
        self.len = len


class OfficeArtExtensionList(Strict):

    pass

class Scene3D(Strict):

    camera = Camera()
    lightRig = LightRig()
    backdrop = Backdrop(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 camera=None,
                 lightRig=None,
                 backdrop=None,
                 extLst=None,
                ):
        self.camera = camera
        self.lightRig = lightRig
        self.backdrop = backdrop
        self.extLst = extLst


class Camera(Strict):

    prst = Set(values=(['legacyObliqueTopLeft', 'legacyObliqueTop', 'legacyObliqueTopRight', 'legacyObliqueLeft', 'legacyObliqueFront', 'legacyObliqueRight', 'legacyObliqueBottomLeft', 'legacyObliqueBottom', 'legacyObliqueBottomRight', 'legacyPerspectiveTopLeft', 'legacyPerspectiveTop', 'legacyPerspectiveTopRight', 'legacyPerspectiveLeft', 'legacyPerspectiveFront', 'legacyPerspectiveRight', 'legacyPerspectiveBottomLeft', 'legacyPerspectiveBottom', 'legacyPerspectiveBottomRight', 'orthographicFront', 'isometricTopUp', 'isometricTopDown', 'isometricBottomUp', 'isometricBottomDown', 'isometricLeftUp', 'isometricLeftDown', 'isometricRightUp', 'isometricRightDown', 'isometricOffAxis1Left', 'isometricOffAxis1Right', 'isometricOffAxis1Top', 'isometricOffAxis2Left', 'isometricOffAxis2Right', 'isometricOffAxis2Top', 'isometricOffAxis3Left', 'isometricOffAxis3Right', 'isometricOffAxis3Bottom', 'isometricOffAxis4Left', 'isometricOffAxis4Right', 'isometricOffAxis4Bottom', 'obliqueTopLeft', 'obliqueTop', 'obliqueTopRight', 'obliqueLeft', 'obliqueRight', 'obliqueBottomLeft', 'obliqueBottom', 'obliqueBottomRight', 'perspectiveFront', 'perspectiveLeft', 'perspectiveRight', 'perspectiveAbove', 'perspectiveBelow', 'perspectiveAboveLeftFacing', 'perspectiveAboveRightFacing', 'perspectiveContrastingLeftFacing', 'perspectiveContrastingRightFacing', 'perspectiveHeroicLeftFacing', 'perspectiveHeroicRightFacing', 'perspectiveHeroicExtremeLeftFacing', 'perspectiveHeroicExtremeRightFacing', 'perspectiveRelaxed', 'perspectiveRelaxedModerately']))
    fov = ST_Angle()
    zoom = "unknown defintion for ST_PositivePercentage"
    rot = SphereCoords(allow_none=True)

    def __init__(self,
                 prst=None,
                 fov=None,
                 zoom=None,
                 rot=None,
                ):
        self.prst = prst
        self.fov = fov
        self.zoom = zoom
        self.rot = rot


class SphereCoords(Strict):

    lat = ST_Angle()
    lon = ST_Angle()
    rev = ST_Angle()

    def __init__(self,
                 lat=None,
                 lon=None,
                 rev=None,
                ):
        self.lat = lat
        self.lon = lon
        self.rev = rev


class LightRig(Strict):

    rig = Set(values=(['legacyFlat1', 'legacyFlat2', 'legacyFlat3', 'legacyFlat4', 'legacyNormal1', 'legacyNormal2', 'legacyNormal3', 'legacyNormal4', 'legacyHarsh1', 'legacyHarsh2', 'legacyHarsh3', 'legacyHarsh4', 'threePt', 'balanced', 'soft', 'harsh', 'flood', 'contrasting', 'morning', 'sunrise', 'sunset', 'chilly', 'freezing', 'flat', 'twoPt', 'glow', 'brightRoom']))
    dir = Set(values=(['tl', 't', 'tr', 'l', 'r', 'bl', 'b', 'br']))
    rot = SphereCoords(allow_none=True)

    def __init__(self,
                 rig=None,
                 dir=None,
                 rot=None,
                ):
        self.rig = rig
        self.dir = dir
        self.rot = rot


class Backdrop(Strict):

    anchor = Point3D()
    norm = Vector3D()
    up = Vector3D()
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 anchor=None,
                 norm=None,
                 up=None,
                 extLst=None,
                ):
        self.anchor = anchor
        self.norm = norm
        self.up = up
        self.extLst = extLst


class Point3D(Strict):

    x = Coordinate()
    y = Coordinate()
    z = Coordinate()

    def __init__(self,
                 x=None,
                 y=None,
                 z=None,
                ):
        self.x = x
        self.y = y
        self.z = z


class Vector3D(Strict):

    dx = Coordinate()
    dy = Coordinate()
    dz = Coordinate()

    def __init__(self,
                 dx=None,
                 dy=None,
                 dz=None,
                ):
        self.dx = dx
        self.dy = dy
        self.dz = dz


class Shape3D(Strict):

    z = Coordinate()
    extrusionH = Integer()
    contourW = Integer()
    prstMaterial = Set(values=(['legacyMatte', 'legacyPlastic', 'legacyMetal', 'legacyWireframe', 'matte', 'plastic', 'metal', 'warmMatte', 'translucentPowder', 'powder', 'dkEdge', 'softEdge', 'clear', 'flat', 'softmetal']))
    bevelT = Bevel(allow_none=True)
    bevelB = Bevel(allow_none=True)
    extrusionClr = Color(allow_none=True)
    contourClr = Color(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 z=None,
                 extrusionH=None,
                 contourW=None,
                 prstMaterial=None,
                 bevelT=None,
                 bevelB=None,
                 extrusionClr=None,
                 contourClr=None,
                 extLst=None,
                ):
        self.z = z
        self.extrusionH = extrusionH
        self.contourW = contourW
        self.prstMaterial = prstMaterial
        self.bevelT = bevelT
        self.bevelB = bevelB
        self.extrusionClr = extrusionClr
        self.contourClr = contourClr
        self.extLst = extLst


class Bevel(Strict):

    w = Integer()
    h = Integer()
    prst = Set(values=(['relaxedInset', 'circle', 'slope', 'cross', 'angle', 'softRound', 'convex', 'coolSlant', 'divot', 'riblet', 'hardEdge', 'artDeco']))

    def __init__(self,
                 w=None,
                 h=None,
                 prst=None,
                ):
        self.w = w
        self.h = h
        self.prst = prst


class Color(Strict):

    pass


class DPt(Strict):

    idx = UnsignedInt()
    invertIfNegative = Boolean(allow_none=True)
    marker = Marker(allow_none=True)
    bubble3D = Boolean(allow_none=True)
    explosion = UnsignedInt(allow_none=True)
    spPr = ShapeProperties(allow_none=True)
    pictureOptions = PictureOptions(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 idx=None,
                 invertIfNegative=None,
                 marker=None,
                 bubble3D=None,
                 explosion=None,
                 spPr=None,
                 pictureOptions=None,
                 extLst=None,
                ):
        self.idx = idx
        self.invertIfNegative = invertIfNegative
        self.marker = marker
        self.bubble3D = bubble3D
        self.explosion = explosion
        self.spPr = spPr
        self.pictureOptions = pictureOptions
        self.extLst = extLst


class UnsignedInt(Strict):

    val = Integer()

    def __init__(self,
                 val=None,
                ):
        self.val = val


class Boolean(Strict):

    val = Bool(allow_none=True)

    def __init__(self,
                 val=None,
                ):
        self.val = val


class PictureOptions(Strict):

    applyToFront = Boolean(allow_none=True)
    applyToSides = Boolean(allow_none=True)
    applyToEnd = Boolean(allow_none=True)
    pictureFormat = PictureFormat(allow_none=True)
    pictureStackUnit = PictureStackUnit(allow_none=True)

    def __init__(self,
                 applyToFront=None,
                 applyToSides=None,
                 applyToEnd=None,
                 pictureFormat=None,
                 pictureStackUnit=None,
                ):
        self.applyToFront = applyToFront
        self.applyToSides = applyToSides
        self.applyToEnd = applyToEnd
        self.pictureFormat = pictureFormat
        self.pictureStackUnit = pictureStackUnit


class PictureFormat(Strict):

    val = Set(values=(['stretch', 'stack', 'stackScale']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class PictureStackUnit(Strict):

    val = Float()

    def __init__(self,
                 val=None,
                ):
        self.val = val


class DLbls(Strict):

    dLbl = DLbl(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 dLbl=None,
                 extLst=None,
                ):
        self.dLbl = dLbl
        self.extLst = extLst


class DLbl(Strict):

    idx = UnsignedInt()
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 idx=None,
                 extLst=None,
                ):
        self.idx = idx
        self.extLst = extLst


class Trendline(Strict):

    name = String(allow_none=True)
    spPr = ShapeProperties(allow_none=True)
    trendlineType = TrendlineType()
    order = Order(allow_none=True)
    period = Period(allow_none=True)
    forward = Double(allow_none=True)
    backward = Double(allow_none=True)
    intercept = Double(allow_none=True)
    dispRSqr = Boolean(allow_none=True)
    dispEq = Boolean(allow_none=True)
    trendlineLbl = TrendlineLbl(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 name=None,
                 spPr=None,
                 trendlineType=None,
                 order=None,
                 period=None,
                 forward=None,
                 backward=None,
                 intercept=None,
                 dispRSqr=None,
                 dispEq=None,
                 trendlineLbl=None,
                 extLst=None,
                ):
        self.name = name
        self.spPr = spPr
        self.trendlineType = trendlineType
        self.order = order
        self.period = period
        self.forward = forward
        self.backward = backward
        self.intercept = intercept
        self.dispRSqr = dispRSqr
        self.dispEq = dispEq
        self.trendlineLbl = trendlineLbl
        self.extLst = extLst


class TrendlineType(Strict):

    val = Set(values=(['exp', 'linear', 'log', 'movingAvg', 'poly', 'power']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class Order(Strict):

    val = MinMax()

    def __init__(self,
                 val=None,
                ):
        self.val = val


class Period(Strict):

    val = Integer()

    def __init__(self,
                 val=None,
                ):
        self.val = val


class Double(Strict):

    val = Float()

    def __init__(self,
                 val=None,
                ):
        self.val = val


class TrendlineLbl(Strict):

    layout = Layout(allow_none=True)
    tx = Tx(allow_none=True)
    numFmt = NumFmt(allow_none=True)
    spPr = ShapeProperties(allow_none=True)
    txPr = TextBody(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 layout=None,
                 tx=None,
                 numFmt=None,
                 spPr=None,
                 txPr=None,
                 extLst=None,
                ):
        self.layout = layout
        self.tx = tx
        self.numFmt = numFmt
        self.spPr = spPr
        self.txPr = txPr
        self.extLst = extLst


class Layout(Strict):

    manualLayout = ManualLayout(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 manualLayout=None,
                 extLst=None,
                ):
        self.manualLayout = manualLayout
        self.extLst = extLst


class ManualLayout(Strict):

    layoutTarget = LayoutTarget(allow_none=True)
    xMode = LayoutMode(allow_none=True)
    yMode = LayoutMode(allow_none=True)
    wMode = LayoutMode(allow_none=True)
    hMode = LayoutMode(allow_none=True)
    x = Double(allow_none=True)
    y = Double(allow_none=True)
    w = Double(allow_none=True)
    h = Double(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 layoutTarget=None,
                 xMode=None,
                 yMode=None,
                 wMode=None,
                 hMode=None,
                 x=None,
                 y=None,
                 w=None,
                 h=None,
                 extLst=None,
                ):
        self.layoutTarget = layoutTarget
        self.xMode = xMode
        self.yMode = yMode
        self.wMode = wMode
        self.hMode = hMode
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.extLst = extLst


class LayoutTarget(Strict):

    val = Set(values=(['inner', 'outer']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class LayoutMode(Strict):

    val = Set(values=(['edge', 'factor']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class NumFmt(Strict):

    formatCode = String()
    sourceLinked = Bool()

    def __init__(self,
                 formatCode=None,
                 sourceLinked=None,
                ):
        self.formatCode = formatCode
        self.sourceLinked = sourceLinked


class TextBody(Strict):

    bodyPr = TextBodyProperties()
    lstStyle = TextListStyle(allow_none=True)
    p = TextParagraph()

    def __init__(self,
                 bodyPr=None,
                 lstStyle=None,
                 p=None,
                ):
        self.bodyPr = bodyPr
        self.lstStyle = lstStyle
        self.p = p


class TextBodyProperties(Strict):

    rot = Integer()
    spcFirstLastPara = Bool(allow_none=True)
    vertOverflow = Set(values=(['overflow', 'ellipsis', 'clip']))
    horzOverflow = Set(values=(['overflow', 'clip']))
    vert = Set(values=(['horz', 'vert', 'vert270', 'wordArtVert', 'eaVert', 'mongolianVert', 'wordArtVertRtl']))
    wrap = Set(values=(['none', 'square']))
    lIns = Coordinate()
    tIns = Coordinate()
    rIns = Coordinate()
    bIns = Coordinate()
    numCol = Integer()
    spcCol = ST_Coordinate32Unqualified()
    rtlCol = Bool(allow_none=True)
    fromWordArt = Bool(allow_none=True)
    anchor = Set(values=(['t', 'ctr', 'b', 'just', 'dist']))
    anchorCtr = Bool(allow_none=True)
    forceAA = Bool(allow_none=True)
    upright = Bool(allow_none=True)
    compatLnSpc = Bool(allow_none=True)
    prstTxWarp = PresetTextShape(allow_none=True)
    scene3d = Scene3D(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 rot=None,
                 spcFirstLastPara=None,
                 vertOverflow=None,
                 horzOverflow=None,
                 vert=None,
                 wrap=None,
                 lIns=None,
                 tIns=None,
                 rIns=None,
                 bIns=None,
                 numCol=None,
                 spcCol=None,
                 rtlCol=None,
                 fromWordArt=None,
                 anchor=None,
                 anchorCtr=None,
                 forceAA=None,
                 upright=None,
                 compatLnSpc=None,
                 prstTxWarp=None,
                 scene3d=None,
                 extLst=None,
                ):
        self.rot = rot
        self.spcFirstLastPara = spcFirstLastPara
        self.vertOverflow = vertOverflow
        self.horzOverflow = horzOverflow
        self.vert = vert
        self.wrap = wrap
        self.lIns = lIns
        self.tIns = tIns
        self.rIns = rIns
        self.bIns = bIns
        self.numCol = numCol
        self.spcCol = spcCol
        self.rtlCol = rtlCol
        self.fromWordArt = fromWordArt
        self.anchor = anchor
        self.anchorCtr = anchorCtr
        self.forceAA = forceAA
        self.upright = upright
        self.compatLnSpc = compatLnSpc
        self.prstTxWarp = prstTxWarp
        self.scene3d = scene3d
        self.extLst = extLst


class PresetTextShape(Strict):

    prst = Set(values=(['textNoShape', 'textPlain', 'textStop', 'textTriangle', 'textTriangleInverted', 'textChevron', 'textChevronInverted', 'textRingInside', 'textRingOutside', 'textArchUp', 'textArchDown', 'textCircle', 'textButton', 'textArchUpPour', 'textArchDownPour', 'textCirclePour', 'textButtonPour', 'textCurveUp', 'textCurveDown', 'textCanUp', 'textCanDown', 'textWave1', 'textWave2', 'textDoubleWave1', 'textWave4', 'textInflate', 'textDeflate', 'textInflateBottom', 'textDeflateBottom', 'textInflateTop', 'textDeflateTop', 'textDeflateInflate', 'textDeflateInflateDeflate', 'textFadeRight', 'textFadeLeft', 'textFadeUp', 'textFadeDown', 'textSlantUp', 'textSlantDown', 'textCascadeUp', 'textCascadeDown']))
    avLst = GeomGuideList(allow_none=True)

    def __init__(self,
                 prst=None,
                 avLst=None,
                ):
        self.prst = prst
        self.avLst = avLst


class GeomGuideList(Strict):

    gd = GeomGuide(allow_none=True)

    def __init__(self,
                 gd=None,
                ):
        self.gd = gd


class GeomGuide(Strict):

    name = String()
    fmla = String()

    def __init__(self,
                 name=None,
                 fmla=None,
                ):
        self.name = name
        self.fmla = fmla


class TextListStyle(Strict):

    defPPr = TextParagraphProperties(allow_none=True)
    lvl1pPr = TextParagraphProperties(allow_none=True)
    lvl2pPr = TextParagraphProperties(allow_none=True)
    lvl3pPr = TextParagraphProperties(allow_none=True)
    lvl4pPr = TextParagraphProperties(allow_none=True)
    lvl5pPr = TextParagraphProperties(allow_none=True)
    lvl6pPr = TextParagraphProperties(allow_none=True)
    lvl7pPr = TextParagraphProperties(allow_none=True)
    lvl8pPr = TextParagraphProperties(allow_none=True)
    lvl9pPr = TextParagraphProperties(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 defPPr=None,
                 lvl1pPr=None,
                 lvl2pPr=None,
                 lvl3pPr=None,
                 lvl4pPr=None,
                 lvl5pPr=None,
                 lvl6pPr=None,
                 lvl7pPr=None,
                 lvl8pPr=None,
                 lvl9pPr=None,
                 extLst=None,
                ):
        self.defPPr = defPPr
        self.lvl1pPr = lvl1pPr
        self.lvl2pPr = lvl2pPr
        self.lvl3pPr = lvl3pPr
        self.lvl4pPr = lvl4pPr
        self.lvl5pPr = lvl5pPr
        self.lvl6pPr = lvl6pPr
        self.lvl7pPr = lvl7pPr
        self.lvl8pPr = lvl8pPr
        self.lvl9pPr = lvl9pPr
        self.extLst = extLst


class TextParagraphProperties(Strict):

    marL = ST_Coordinate32Unqualified()
    marR = ST_Coordinate32Unqualified()
    lvl = Integer()
    indent = ST_Coordinate32Unqualified()
    algn = Set(values=(['l', 'ctr', 'r', 'just', 'justLow', 'dist', 'thaiDist']))
    defTabSz = Coordinate()
    rtl = Bool(allow_none=True)
    eaLnBrk = Bool(allow_none=True)
    fontAlgn = Set(values=(['auto', 't', 'ctr', 'base', 'b']))
    latinLnBrk = Bool(allow_none=True)
    hangingPunct = Bool(allow_none=True)
    lnSpc = TextSpacing(allow_none=True)
    spcBef = TextSpacing(allow_none=True)
    spcAft = TextSpacing(allow_none=True)
    tabLst = TextTabStopList(allow_none=True)
    defRPr = TextCharacterProperties(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 marL=None,
                 marR=None,
                 lvl=None,
                 indent=None,
                 algn=None,
                 defTabSz=None,
                 rtl=None,
                 eaLnBrk=None,
                 fontAlgn=None,
                 latinLnBrk=None,
                 hangingPunct=None,
                 lnSpc=None,
                 spcBef=None,
                 spcAft=None,
                 tabLst=None,
                 defRPr=None,
                 extLst=None,
                ):
        self.marL = marL
        self.marR = marR
        self.lvl = lvl
        self.indent = indent
        self.algn = algn
        self.defTabSz = defTabSz
        self.rtl = rtl
        self.eaLnBrk = eaLnBrk
        self.fontAlgn = fontAlgn
        self.latinLnBrk = latinLnBrk
        self.hangingPunct = hangingPunct
        self.lnSpc = lnSpc
        self.spcBef = spcBef
        self.spcAft = spcAft
        self.tabLst = tabLst
        self.defRPr = defRPr
        self.extLst = extLst


class TextSpacing(Strict):

    pass

class TextTabStopList(Strict):

    tab = TextTabStop(allow_none=True)

    def __init__(self,
                 tab=None,
                ):
        self.tab = tab


class TextTabStop(Strict):

    pos = Coordinate()
    algn = Set(values=(['l', 'ctr', 'r', 'dec']))

    def __init__(self,
                 pos=None,
                 algn=None,
                ):
        self.pos = pos
        self.algn = algn


class TextCharacterProperties(Strict):

    kumimoji = Bool(allow_none=True)
    lang = String(allow_none=True)
    altLang = String(allow_none=True)
    sz = Integer()
    b = Bool(allow_none=True)
    i = Bool(allow_none=True)
    u = Set(values=(['none', 'words', 'sng', 'dbl', 'heavy', 'dotted', 'dottedHeavy', 'dash', 'dashHeavy', 'dashLong', 'dashLongHeavy', 'dotDash', 'dotDashHeavy', 'dotDotDash', 'dotDotDashHeavy', 'wavy', 'wavyHeavy', 'wavyDbl']))
    strike = Set(values=(['noStrike', 'sngStrike', 'dblStrike']))
    kern = Integer()
    cap = Set(values=(['none', 'small', 'all']))
    spc = TextPoint()
    normalizeH = Bool(allow_none=True)
    baseline = String()
    noProof = Bool(allow_none=True)
    dirty = Bool(allow_none=True)
    err = Bool(allow_none=True)
    smtClean = Bool(allow_none=True)
    smtId = Integer(allow_none=True)
    bmk = String(allow_none=True)
    ln = LineProperties(allow_none=True)
    highlight = Color(allow_none=True)
    latin = TextFont(allow_none=True)
    ea = TextFont(allow_none=True)
    cs = TextFont(allow_none=True)
    sym = TextFont(allow_none=True)
    hlinkClick = Hyperlink(allow_none=True)
    hlinkMouseOver = Hyperlink(allow_none=True)
    rtl = Boolean(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 kumimoji=None,
                 lang=None,
                 altLang=None,
                 sz=None,
                 b=None,
                 i=None,
                 u=None,
                 strike=None,
                 kern=None,
                 cap=None,
                 spc=None,
                 normalizeH=None,
                 baseline=None,
                 noProof=None,
                 dirty=None,
                 err=None,
                 smtClean=None,
                 smtId=None,
                 bmk=None,
                 ln=None,
                 highlight=None,
                 latin=None,
                 ea=None,
                 cs=None,
                 sym=None,
                 hlinkClick=None,
                 hlinkMouseOver=None,
                 rtl=None,
                 extLst=None,
                ):
        self.kumimoji = kumimoji
        self.lang = lang
        self.altLang = altLang
        self.sz = sz
        self.b = b
        self.i = i
        self.u = u
        self.strike = strike
        self.kern = kern
        self.cap = cap
        self.spc = spc
        self.normalizeH = normalizeH
        self.baseline = baseline
        self.noProof = noProof
        self.dirty = dirty
        self.err = err
        self.smtClean = smtClean
        self.smtId = smtId
        self.bmk = bmk
        self.ln = ln
        self.highlight = highlight
        self.latin = latin
        self.ea = ea
        self.cs = cs
        self.sym = sym
        self.hlinkClick = hlinkClick
        self.hlinkMouseOver = hlinkMouseOver
        self.rtl = rtl
        self.extLst = extLst


class TextFont(Strict):

    typeface = String()
    panose = HexBinary(allow_none=True)
    pitchFamily = MinMax(allow_none=True)
    charset = MinMax(allow_none=True)

    def __init__(self,
                 typeface=None,
                 panose=None,
                 pitchFamily=None,
                 charset=None,
                ):
        self.typeface = typeface
        self.panose = panose
        self.pitchFamily = pitchFamily
        self.charset = charset


class Hyperlink(Strict):

    invalidUrl = String(allow_none=True)
    action = String(allow_none=True)
    tgtFrame = String(allow_none=True)
    tooltip = String(allow_none=True)
    history = Bool(allow_none=True)
    highlightClick = Bool(allow_none=True)
    endSnd = Bool(allow_none=True)
    snd = EmbeddedWAVAudioFile(allow_none=True)
    extLst = OfficeArtExtensionList(allow_none=True)

    def __init__(self,
                 invalidUrl=None,
                 action=None,
                 tgtFrame=None,
                 tooltip=None,
                 history=None,
                 highlightClick=None,
                 endSnd=None,
                 snd=None,
                 extLst=None,
                ):
        self.invalidUrl = invalidUrl
        self.action = action
        self.tgtFrame = tgtFrame
        self.tooltip = tooltip
        self.history = history
        self.highlightClick = highlightClick
        self.endSnd = endSnd
        self.snd = snd
        self.extLst = extLst


class EmbeddedWAVAudioFile(Strict):

    name = String(allow_none=True)

    def __init__(self,
                 name=None,
                ):
        self.name = name


class TextParagraph(Strict):

    pPr = TextParagraphProperties(allow_none=True)
    endParaRPr = TextCharacterProperties(allow_none=True)

    def __init__(self,
                 pPr=None,
                 endParaRPr=None,
                ):
        self.pPr = pPr
        self.endParaRPr = endParaRPr


class ErrBars(Strict):

    errDir = ErrDir(allow_none=True)
    errBarType = ErrBarType()
    errValType = ErrValType()
    noEndCap = Boolean(allow_none=True)
    plus = NumDataSource(allow_none=True)
    minus = NumDataSource(allow_none=True)
    val = Double(allow_none=True)
    spPr = ShapeProperties(allow_none=True)
    extLst = ExtensionList(allow_none=True)

    def __init__(self,
                 errDir=None,
                 errBarType=None,
                 errValType=None,
                 noEndCap=None,
                 plus=None,
                 minus=None,
                 val=None,
                 spPr=None,
                 extLst=None,
                ):
        self.errDir = errDir
        self.errBarType = errBarType
        self.errValType = errValType
        self.noEndCap = noEndCap
        self.plus = plus
        self.minus = minus
        self.val = val
        self.spPr = spPr
        self.extLst = extLst


class ErrDir(Strict):

    val = Set(values=(['x', 'y']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class ErrBarType(Strict):

    val = Set(values=(['both', 'minus', 'plus']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class ErrValType(Strict):

    val = Set(values=(['cust', 'fixedVal', 'percentage', 'stdDev', 'stdErr']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class NumDataSource(Strict):

    pass

class AxDataSource(Strict):

    pass


class Coordinate(Strict):

    """union of unqualified coordinate and universal measure types
    see worksheet properties for universal measure
    """

    value = MinMax(min=-27273042329600, max=27273042316900)


class TextPoint(Strict):
    # union of universal measure and -40000 to 40000

    value = MinMax(min=-40000, max=40000)


class HexBinary(Strict):
    # definition required, standard XML def

    pass
