
#Autogenerated schema
from openpyxl2.descriptors.serialisable import Serialisable
from openpyxl2.descriptors import (
    Typed,
    Bool,
    MinMax,
    Integer,
    NoneSet,
    Float,
)
from openpyxl2.descriptors.excel import ExtensionList, Percentage

from .chartBase import GapAmount
from .series import PieSer
from .label import DLbls
from .bar_chart import ChartLines


class _PieChartBase(Serialisable):

    varyColors = Bool(nested=True, allow_none=True)
    ser = Typed(expected_type=PieSer, allow_none=True)
    dLbls = Typed(expected_type=DLbls, allow_none=True)

    __elements__ = ('varyColors', 'ser', 'dLbls')

    def __init__(self,
                 varyColors=None,
                 ser=None,
                 dLbls=None,
                ):
        self.varyColors = varyColors
        self.ser = ser
        self.dLbls = dLbls


class PieChart(_PieChartBase):

    firstSliceAng = MinMax(min=0, max=360, nested=True)
    extLst = Typed(expected_type=ExtensionList, allow_none=True)

    __elements__ = ('firstSliceAng', 'extLst')

    def __init__(self,
                 firstSliceAng=0,
                 extLst=None,
                ):
        self.firstSliceAng = firstSliceAng


class PieChart3D(_PieChartBase):

    extLst = Typed(expected_type=ExtensionList, allow_none=True)


class DoughnutChart(_PieChartBase):

    firstSliceAng = MinMax(min=0, max=360, nested=True)
    holeSize = Percentage(allow_none=True, nested=True)
    extLst = Typed(expected_type=ExtensionList, allow_none=True)

    __elements__ = ('firstSliceAng', 'holeSize', 'extLst')

    def __init__(self,
                 firstSliceAng=0,
                 holeSize=None,
                 extLst=None,
                ):
        self.firstSliceAng = firstSliceAng
        self.holeSize = holeSize


class CustSplit(Serialisable):

    secondPiePt = Integer(allow_none=True, nested=True)

    __elements__ = ('secondPiePt',)

    def __init__(self,
                 secondPiePt=None,
                ):
        self.secondPiePt = secondPiePt


class OfPieChart(_PieChartBase):

    ofPieType = NoneSet(values=(['pie', 'bar']), nested=True)
    gapWidth = Typed(expected_type=GapAmount, allow_none=True)
    splitType = NoneSet(values=(['auto', 'cust', 'percent', 'pos', 'val']), nested=True)
    splitPos = Float(nested=True, allow_none=True)
    custSplit = Typed(expected_type=CustSplit, allow_none=True)
    secondPieSize = Percentage(allow_none=True, nested=True)
    serLines = Typed(expected_type=ChartLines, allow_none=True)
    extLst = Typed(expected_type=ExtensionList, allow_none=True)

    __elements__ = ('ofPieType', 'gapWidth', 'splitType', 'splitPos',
                    'custSplit', 'secondPieSize', 'serLines', 'extLst')

    def __init__(self,
                 ofPieType=None,
                 gapWidth=None,
                 splitType=None,
                 splitPos=None,
                 custSplit=None,
                 secondPieSize=None,
                 serLines=None,
                 extLst=None,
                ):
        self.ofPieType = ofPieType
        self.gapWidth = gapWidth
        self.splitType = splitType
        self.splitPos = splitPos
        self.custSplit = custSplit
        self.secondPieSize = secondPieSize
        self.serLines = serLines
