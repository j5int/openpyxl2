
#Autogenerated schema
from openpyxl2.descriptors.serialisable import Serialisable
from openpyxl2.descriptors import (
    Typed,
    Bool,
    MinMax,
    Integer,
    Set,
    Float,
)
from openpyxl2.descriptors.excel import ExtensionList

from .chartBase import GapAmount
from .series import PieSer
from .label import DLbls
from .bar_chart import ChartLines


class HoleSize(Serialisable):

    # needs to serialise to %
    val = MinMax(min=0, max=100)

    def __init__(self,
                 val=10,
                ):
        self.val = val


class FirstSliceAng(Serialisable):

    val = MinMax(min=0, max=360)

    def __init__(self, val=0, ):
        self.val = val



class _PieChartBase(Serialisable):

    varyColors = Bool(nested=True, allow_none=True)
    ser = Typed(expected_type=PieSer, allow_none=True)
    dLbls = Typed(expected_type=DLbls, allow_none=True)

    __elements__ = ('varyColors', 'ser', 'dLbls')

    def __init__(self,
                 varyColors=None,
                 ser=None,
                 dLbls=None,
                ):
        self.varyColors = varyColors
        self.ser = ser
        self.dLbls = dLbls


class PieChart(_PieChartBase):

    as_3D = True

    firstSliceAng = Typed(expected_type=FirstSliceAng, allow_none=True) #2d
    extLst = Typed(expected_type=ExtensionList, allow_none=True)

    __elements__ = ('firstSliceAng', 'extLst')

    def __init__(self,
                 firstSliceAng=None,
                 extLst=None,
                ):
        self.firstSliceAng = firstSliceAng
        self.extLst = extLst


class DoughnutChart(_PieChartBase):

    firstSliceAng = Typed(expected_type=FirstSliceAng, allow_none=True)
    holeSize = Typed(expected_type=HoleSize, allow_none=True)
    extLst = Typed(expected_type=ExtensionList, allow_none=True)

    __elements__ = ('firstSliceAng', 'holeSize', 'extLst')

    def __init__(self,
                 firstSliceAng=None,
                 holeSize=None,
                 extLst=None,
                ):
        self.firstSliceAng = firstSliceAng
        self.holeSize = holeSize
        self.extLst = extLst

class SecondPieSize(Serialisable):

    # needs to serialise to %
    val = MinMax(min=0, max=200)

    def __init__(self,
                 val=None,
                ):
        self.val = val


class CustSplit(Serialisable):

    secondPiePt = Integer(allow_none=True, nested=True)

    __elements__ = ('secondPiePt',)

    def __init__(self,
                 secondPiePt=None,
                ):
        self.secondPiePt = secondPiePt


class SplitType(Serialisable):

    val = Set(values=(['auto', 'cust', 'percent', 'pos', 'val']))

    def __init__(self,
                 val=None,
                ):
        self.val = val



class OfPieType(Serialisable):

    val = Set(values=(['pie', 'bar']))

    def __init__(self,
                 val=None,
                ):
        self.val = val


class OfPieChart(_PieChartBase):

    ofPieType = Typed(expected_type=OfPieType, )
    gapWidth = Typed(expected_type=GapAmount, allow_none=True)
    splitType = Typed(expected_type=SplitType, allow_none=True)
    splitPos = Float(nested=True, allow_none=True)
    custSplit = Typed(expected_type=CustSplit, allow_none=True)
    secondPieSize = Typed(expected_type=SecondPieSize, allow_none=True)
    serLines = Typed(expected_type=ChartLines, allow_none=True)
    extLst = Typed(expected_type=ExtensionList, allow_none=True)

    __elements__ = ('ofPieType', 'gapWidth', 'splitType', 'splitPos', 'custSplit', 'secondPieSize', 'serLines', 'extLst')

    def __init__(self,
                 ofPieType=None,
                 gapWidth=None,
                 splitType=None,
                 splitPos=None,
                 custSplit=None,
                 secondPieSize=None,
                 serLines=None,
                 extLst=None,
                ):
        self.ofPieType = ofPieType
        self.gapWidth = gapWidth
        self.splitType = splitType
        self.splitPos = splitPos
        self.custSplit = custSplit
        self.secondPieSize = secondPieSize
        self.serLines = serLines
        self.extLst = extLst
